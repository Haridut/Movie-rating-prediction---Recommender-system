{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #!/usr/bin/env python3\
# -*- coding: utf-8 -*-\
"""\
Created on Fri Apr 28 15:10:55 2017\
\
@author: Haridut\
"""\
\
import pandas as pd\
import numpy as np\
from math import sqrt\
'''train_df=pd.read_csv('/Users/Haridut/Documents/UIUC/DataMining /project/train.txt')\
movie_df=pd.read_csv('/Users/Haridut/Documents/UIUC/DataMining /project/movie.txt')\
#test_df=pd.read_csv('/Users/Haridut/Documents/UIUC/DataMining /project/test.txt')\
user_df=pd.read_csv('/Users/Haridut/Documents/UIUC/DataMining /project/user.txt')\
test_df=pd.read_csv('/Users/Haridut/Documents/UIUC/DataMining /project/test.txt')\
user_df=user_df.rename(index=str, columns=\{'ID':'user-Id'\})\
movie_df=movie_df.rename(index=str, columns=\{'Id':'movie-Id'\})\
#Creating a nested dictionary such that the keys are the users and each of the values are in turn \
#dictionaries that have the movies they watched as keys and ratings as values.\
df=train_df.groupby('user-Id').apply(lambda x: x.set_index('movie-Id')['rating'].to_dict()).to_dict()\
#Calculating Pearson's coefficient between two users that are passed int this function'''\
'''def Pearson_coeff(user1,user2):\
    both_rated=\{\}\
    for movie in df[user1]:\
        if movie in df[user2]:\
            both_rated[movie]=1\
    if len(both_rated)==0:\
        return 0\
    user1_sum=sum([df[user1][i] for i in both_rated])\
    user2_sum=sum([df[user2][i] for i in both_rated])\
    user1_sum_sq=sum([pow(df[user1][i],2) for i in both_rated])\
    user2_sum_sq=sum([pow(df[user2][i],2) for i in both_rated])\
    product_sum = sum([df[user1][i] * df[user2][i] for i in both_rated])\
    numerator= product_sum -(user1_sum*user2_sum/len(both_rated))\
    denominator=sqrt((user1_sum_sq-pow(user1_sum,2)/len(both_rated))*(user2_sum_sq-pow(user2_sum,2)/len(both_rated)))\
    if denominator==0:\
        return 0\
    else:\
        r_value=numerator/denominator\
        return r_value\
#Making a Matrix that contains Pearson's coefficient between each user.This may take a long time to execute\
Pearson_mat=[]\
for i in df:\
    temp_list=[]\
    for j in df:\
        if i==j:\
            temp_list.append(1.0)\
        else:\
            temp_list.append(sim_Pearson(i,j))\
    Pearson_mat.append(temp_list)\
Pearson_mat=np.array([np.array(x) for x in Pearson_mat])'''\
average_df=train_df[['user-Id','rating']].groupby(['user-Id'],as_index=True).median()\
neigh=[]\
for i in df:\
    temp=list(Pearson_mat[i].argsort()[::-1])\
    neigh.append(temp)   \
def get_neighbors(user,movie,k):\
    nearest_neighbors=[]\
    for i in neigh[user]:\
        if len(nearest_neighbors)==k:\
            return nearest_neighbors\
        elif movie in df[i]:\
            nearest_neighbors.append(i)\
    return nearest_neighbors\
def get_rating(user,movie):\
    total_dic=\{\}\
    neighbors_list=get_neighbors(user,movie,100)\
    if len(neighbors_list)!=0:\
        for i in neighbors_list:\
            if df[i][movie] in total_dic:\
                total_dic[df[i][movie]]+=1\
            else:\
                total_dic[df[i][movie]]=1\
        sorted_list=sorted(total_dic,key=total_dic.get, reverse=True)\
        return sorted_list[0]\
    else:\
        rating=average_df.loc[user]['rating']\
        return (int(round(rating)))\
f=open('/Users/Haridut/Documents/UIUC/DataMining /project/output6.txt','w')\
f.write('Id,rating') \
for i in range(len(test_df['Id'])):  \
    f.write('\\n'+str(test_df['Id'][i])+','+str(get_rating(test_df['user-Id'][i],test_df['movie-Id'][i])))     \
        \
}